/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <220>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <220>;
            hold-trigger-on-release;
        };

        ltm: layer_tap_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <220>;
            require-prior-idle-ms = <150>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <32 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB        &kp Q          &kp W            &kp E        &kp R     &kp T    &kp Y         &kp U      &kp I             &kp O             &kp P            &kp BSPC
&ht LCTRL ESC  &hml LSHIFT A  &hml LEFT_ALT S  &hml LCMD D  &ltm 1 F  &kp G    &kp H         &kp J      &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &hmr LSHFT SEMI  &kp SQT
&kp LSHFT      &kp Z          &kp X            &kp C        &kp V     &kp B    &kp N         &kp M      &kp COMMA         &kp DOT           &kp FSLH         &kp RA(RC(RG(RSHIFT)))
                                               &mo 3        &kp LGUI  &mo 2    &ltm 1 ENTER  &kp SPACE  &mo 4
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none   &none   &none   &none   &none     &none     &none          &none        &none      &none  &none
&trans  &trans  &trans  &trans  &trans  &none     &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &none  &none
&trans  &none   &none   &none   &none   &none     &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none  &trans
                        &trans  &trans  &trans    &trans    &trans         &trans
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &none        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp TILDE
&trans  &none     &none   &none     &none     &none        &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &trans
                          &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6  &kp N7           &kp N8           &kp N9           &kp N0  &trans
&trans  &trans        &trans        &trans        &trans        &none     &none         &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &none
&trans  &none         &none         &none         &none         &none     &none         &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &none   &trans
                                    &trans        &trans        &trans    &trans        &kp KP_NUMBER_0  &trans
            >;
        };

        func_layer {
            bindings = <
&kp CAPS    &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6                &kp F7                &kp F8             &kp F9           &kp F10     &kp DEL
&trans      &trans        &trans        &trans        &trans        &none           &trans                &trans                &none              &kp F11          &kp F12     &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans
                                        &trans        &trans        &trans          &trans                &trans                &trans
            >;
        };
    };
};
